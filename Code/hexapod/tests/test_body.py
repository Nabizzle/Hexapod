from hexapod import body
import numpy as np
from math import cos, sin, radians

def test_bodyPos():
    """Tests the default body positions are correct."""
    assert np.allclose(body.bodyPos(0, 0, 0, 0, 0, 0, 85),
                       np.array([[42.5, 73.61215932, 0],
                                 [85, 0, 0],
                                 [42.5, -73.61215932, 0],
                                 [-42.5, -73.61215932, 0],
                                 [-85, 0, 0],
                                 [-42.5, 73.61215932, 0],
                                 [42.5, 73.61215932, 0]]))


def test_bodyAngle():
    """Tests that found angle positions are correct."""
    angles = np.array([])
    for i in range(90):
        x = cos(radians(i))
        y = sin(radians(i))
        if i == 0:
            angles = np.array([body.bodyAngle(x, y, 30)])
        else:
            angles = np.vstack((angles, np.array([body.bodyAngle(x, y, 30)])))

    check_angles = np.array([[-0.0, -29.999999999999996],
                             [-0.5773014207608226, -29.996221203369487],
                             [-1.1543098615965461, -29.984884238321516],
                             [-1.7307328951865897, -29.965987381667272],
                             [-2.306279196466827, -29.939527769031972],
                             [-2.8806590864052675, -29.905501406282664],
                             [-3.4535850670351724, -29.86390318556308],
                             [-4.0247723449642185, -29.814726905971085],
                             [-4.593939340689479, -29.757965298924272],
                             [-5.160808181183661, -29.69361005826873],
                             [-5.725105173376177, -29.621651875195493],
                             [-6.286561256330824, -29.542080478037878],
                             [-6.84491243011747, -29.45488467703155],
                             [-7.39990015958542, -29.36005241412715],
                             [-7.951271751467961, -29.257570817952463],
                             [-8.498780703478046, -29.147426264028205],
                             [-9.04218702429102, -29.029604440347057],
                             [-9.581257523548551, -28.904090418430968],
                             [-10.115766071255958, -28.770868729985793],
                             [-10.645493826179495, -28.6299234492754],
                             [-11.170229433078791, -28.48123828133947],
                             [-11.689769188829931, -28.32479665617976],
                             [-12.203917177704193, -28.160581829038822],
                             [-12.712485376264933, -27.98857698689307],
                             [-13.215293728528254, -27.80876536127804],
                             [-13.71217019220122, -27.62113034755786],
                             [-14.202950756963, -27.42565563074339],
                             [-14.687479435889166, -27.222325317953572],
                             [-15.16560823123665, -27.011124077602524],
                             [-15.637197075906764, -26.792037285380246],
                             [-16.10211375198601, -26.56505117707799],
                             [-16.560233787829873, -26.3301530082893],
                             [-17.01144033520333, -26.087331220995285],
                             [-17.45562402802514, -25.836575617016774],
                             [-17.892682824280623, -25.577877538287396],
                             [-18.322521832671953, -25.311230053869327],
                             [-18.745053125566056, -25.03662815359815],
                             [-19.16019553977966, -24.754068948204164],
                             [-19.567874466710048, -24.463551875715105],
                             [-19.968021633279488, -24.165078913899336],
                             [-20.36057487511308, -23.858654798458655],
                             [-20.745477903314164, -23.544287246627217],
                             [-21.122680066140372, -23.221987185776154],
                             [-21.492136106817775, -22.891768986563875],
                             [-21.853805918661127, -22.55365070010893],
                             [-22.207654298596488, -22.207654298596488],
                             [-22.55365070010893, -21.853805918661127],
                             [-22.891768986563875, -21.492136106817775],
                             [-23.221987185776154, -21.122680066140372],
                             [-23.544287246627217, -20.745477903314164],
                             [-23.858654798458655, -20.360574875113084],
                             [-24.165078913899336, -19.968021633279488],
                             [-24.463551875715112, -19.567874466710048],
                             [-24.754068948204164, -19.160195539779664],
                             [-25.03662815359815, -18.745053125566056],
                             [-25.311230053869327, -18.322521832671953],
                             [-25.577877538287396, -17.892682824280623],
                             [-25.836575617016774, -17.45562402802514],
                             [-26.08733122099529, -17.01144033520333],
                             [-26.3301530082893, -16.560233787829873],
                             [-26.56505117707799, -16.102113751986018],
                             [-26.792037285380246, -15.637197075906766],
                             [-27.011124077602524, -15.165608231236654],
                             [-27.222325317953565, -14.687479435889166],
                             [-27.42565563074339, -14.202950756963002],
                             [-27.62113034755786, -13.71217019220122],
                             [-27.80876536127804, -13.215293728528254],
                             [-27.98857698689307, -12.712485376264931],
                             [-28.160581829038822, -12.203917177704191],
                             [-28.32479665617976, -11.689769188829935],
                             [-28.48123828133947, -11.170229433078795],
                             [-28.629923449275392, -10.645493826179496],
                             [-28.770868729985793, -10.115766071255958],
                             [-28.904090418430968, -9.581257523548551],
                             [-29.029604440347057, -9.04218702429102],
                             [-29.147426264028205, -8.498780703478046],
                             [-29.257570817952463, -7.951271751467958],
                             [-29.36005241412715, -7.399900159585418],
                             [-29.45488467703155, -6.844912430117475],
                             [-29.542080478037878, -6.286561256330828],
                             [-29.621651875195493, -5.725105173376179],
                             [-29.69361005826873, -5.160808181183663],
                             [-29.757965298924272, -4.59393934068948],
                             [-29.814726905971085, -4.0247723449642185],
                             [-29.86390318556308, -3.453585067035172],
                             [-29.905501406282664, -2.8806590864052666],
                             [-29.939527769031972, -2.3062791964668246],
                             [-29.965987381667272, -1.730732895186594],
                             [-29.984884238321516, -1.1543098615965497],
                             [-29.996221203369487, -0.5773014207608255]])
    assert np.allclose(angles, check_angles)